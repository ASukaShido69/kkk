import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import ExamTimer from "@/components/exam-timer";
import { Moon, Sun, BookOpen, Filter } from "lucide-react";
import type { Question, ExamConfig } from "@/lib/types";

// Placeholder for exam duration (in seconds) - assuming 3 hours
const EXAM_DURATION = 3 * 60 * 60;

const categories = [
  { id: "ความสามารถทั่วไป", name: "ความสามารถทั่วไป", color: "bg-blue-500", darkColor: "bg-blue-600" },
  { id: "ภาษาไทย", name: "ภาษาไทย", color: "bg-green-500", darkColor: "bg-green-600" },
  { id: "คอมพิวเตอร์ (เทคโนโลยีสารสนเทศ)", name: "คอมพิวเตอร์", color: "bg-purple-500", darkColor: "bg-purple-600" },
  { id: "ภาษาอังกฤษ", name: "ภาษาอังกฤษ", color: "bg-red-500", darkColor: "bg-red-600" },
  { id: "สังคม วัฒนธรรม จริยธรรม และอาเซียน", name: "สังคม วัฒนธรรม", color: "bg-yellow-500", darkColor: "bg-yellow-600" },
  { id: "กฎหมายที่ประชาชนควรรู้", name: "กฎหมาย", color: "bg-indigo-500", darkColor: "bg-indigo-600" },
];

export default function ExamPage() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<string, number>>({});
  const [bookmarkedQuestions, setBookmarkedQuestions] = useState<string[]>([]);
  const [timeLeft, setTimeLeft] = useState(EXAM_DURATION);
  const [showConfirmSubmit, setShowConfirmSubmit] = useState(false);
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [examConfig, setExamConfig] = useState<any>(null);
  const [showNavigationGrid, setShowNavigationGrid] = useState(false);
  const [examQuestions, setExamQuestions] = useState<Question[]>([]);
  const [autoSaveStatus, setAutoSaveStatus] = useState<"saved" | "saving" | "error">("saved");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [darkMode, setDarkMode] = useState(false);

  // Dark mode effect
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  // Helper function to determine difficulty color
  const getDifficultyColor = (difficulty: string) => {
    if (darkMode) {
      switch (difficulty.toLowerCase()) {
        case "ง่าย":
        case "easy":
          return "bg-green-800 text-green-200 border-green-600";
        case "ปานกลาง":
        case "medium":
          return "bg-yellow-800 text-yellow-200 border-yellow-600";
        case "ยาก":
        case "hard":
          return "bg-red-800 text-red-200 border-red-600";
        default:
          return "bg-gray-700 text-gray-200 border-gray-500";
      }
    } else {
      switch (difficulty.toLowerCase()) {
        case "ง่าย":
        case "easy":
          return "bg-green-100 text-green-800 border-green-300";
        case "ปานกลาง":
        case "medium":
          return "bg-yellow-100 text-yellow-800 border-yellow-300";
        case "ยาก":
        case "hard":
          return "bg-red-100 text-red-800 border-red-300";
        default:
          return "bg-gray-100 text-gray-800 border-gray-300";
      }
    }
  };

  // Load exam configuration and generate questions
  useEffect(() => {
    const savedConfig = localStorage.getItem("examConfig");
    if (savedConfig) {
      const config: ExamConfig = JSON.parse(savedConfig);
      setExamConfig(config);
      // Ensure the number of questions is limited to 150
      const limitedConfig = { ...config, numberOfQuestions: Math.min(config.numberOfQuestions, 150) };
      generateExam(limitedConfig);
    } else {
      toast({
        title: "ข้อผิดพลาด",
        description: "ไม่พบการกำหนดค่าการสอบ กลับไปหน้าหลักเพื่อเริ่มใหม่",
        variant: "destructive",
      });
      setLocation("/");
    }
  }, []);

  const generateExamMutation = useMutation({
    mutationFn: async (config: any) => {
      const response = await apiRequest("POST", "/api/mock-exam", config);
      if (!response.ok) {
        throw new Error("Failed to generate exam");
      }
      return response.json();
    },
    onSuccess: (questions: Question[]) => {
      const limitedQuestions = questions.slice(0, 150);
      setExamQuestions(limitedQuestions);
      setStartTime(new Date());
    },
    onError: (error) => {
      console.error("Error generating exam:", error);
      toast({
        title: "ข้อผิดพลาด",
        description: "ไม่สามารถสร้างข้อสอบได้ กรุณาลองใหม่อีกครั้ง",
        variant: "destructive",
      });
      setLocation("/");
    },
  });

  const generateExam = (config: any) => {
    generateExamMutation.mutate(config);
  };

  // Auto-save functionality
  useEffect(() => {
    if (examQuestions.length > 0) {
      setAutoSaveStatus("saving");
      const saveTimer = setTimeout(() => {
        localStorage.setItem("examProgress", JSON.stringify({
          answers,
          currentQuestionIndex,
          bookmarkedQuestions: Array.from(bookmarkedQuestions),
          startTime: startTime?.toISOString(),
          examQuestions: examQuestions,
        }));
        setAutoSaveStatus("saved");
      }, 1000);

      return () => clearTimeout(saveTimer);
    }
  }, [answers, currentQuestionIndex, bookmarkedQuestions, startTime, examQuestions]);

  // Load saved progress
  useEffect(() => {
    const savedProgress = localStorage.getItem("examProgress");
    const savedConfig = localStorage.getItem("examConfig");

    if (savedProgress && savedConfig) {
      const progress = JSON.parse(savedProgress);
      const config = JSON.parse(savedConfig);

      if (config.examId === examConfig?.examId || !examConfig) {
        setAnswers(progress.answers || {});
        setCurrentQuestionIndex(progress.currentQuestionIndex || 0);
        setBookmarkedQuestions(progress.bookmarkedQuestions || []);
        if (progress.startTime) {
          setStartTime(new Date(progress.startTime));
        }
        setExamQuestions(progress.examQuestions.slice(0, 150) || []);
      } else {
        localStorage.removeItem("examProgress");
        const limitedConfig = { ...config, numberOfQuestions: Math.min(config.numberOfQuestions, 150) };
        generateExam(limitedConfig);
      }
    } else if (savedConfig && !savedProgress) {
      const config = JSON.parse(savedConfig);
      const limitedConfig = { ...config, numberOfQuestions: Math.min(config.numberOfQuestions, 150) };
      generateExam(limitedConfig);
    }
  }, [examConfig]);

  const submitExamMutation = useMutation({
    mutationFn: async (examData: any) => {
      const response = await apiRequest("POST", "/api/scores", examData);
      if (!response.ok) {
        throw new Error("Failed to submit exam");
      }
      return response.json();
    },
    onSuccess: (score) => {
      localStorage.removeItem("examProgress");
      localStorage.setItem("lastExamScore", JSON.stringify(score));
      setLocation("/results");
    },
    onError: (error) => {
      console.error("Error submitting exam:", error);
      toast({
        title: "ข้อผิดพลาด",
        description: "ไม่สามารถบันทึกผลสอบได้ กรุณาลองส่งอีกครั้ง",
        variant: "destructive",
      });
    },
  });

  const handleAnswerSelect = (answerIndex: number) => {
    const currentQuestion = examQuestions[currentQuestionIndex];
    if (currentQuestion) {
      setAnswers(prev => ({
        ...prev,
        [currentQuestion.id]: answerIndex,
      }));
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < examQuestions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      setShowConfirmSubmit(true);
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1);
    }
  };

  const toggleBookmark = (questionId: string) => {
    setBookmarkedQuestions(prev =>
      prev.includes(questionId)
        ? prev.filter(id => id !== questionId)
        : [...prev, questionId]
    );
  };

  const jumpToQuestion = (index: number) => {
    setCurrentQuestionIndex(index);
    setShowNavigationGrid(false);
  };

  const handleSubmitExam = () => {
    if (!startTime) return;

    const endTime = new Date();
    const timeSpent = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);

    let correctAnswers = 0;
    const categoryBreakdown: Record<string, { correct: number; total: number }> = {};

    examQuestions.forEach(question => {
      const userAnswer = answers[question.id];
      const isCorrect = userAnswer === question.correctAnswerIndex;

      if (isCorrect) {
        correctAnswers++;
      }

      if (!categoryBreakdown[question.category]) {
        categoryBreakdown[question.category] = { correct: 0, total: 0 };
      }
      categoryBreakdown[question.category].total++;
      if (isCorrect) {
        categoryBreakdown[question.category].correct++;
      }
    });

    const examData = {
      totalScore: Math.round((correctAnswers / examQuestions.length) * 100),
      totalQuestions: examQuestions.length,
      correctAnswers,
      timeSpent,
      examType: examConfig?.type === "full" ? "สอบเต็มรูปแบบ" : "สอบแบบกำหนดเอง",
      answersGiven: answers,
      categoryBreakdown,
      questions: examQuestions,
      bookmarkedQuestions: bookmarkedQuestions,
    };

    localStorage.setItem("lastExamData", JSON.stringify({
      score: examData,
      questions: examQuestions,
      answers: answers,
      bookmarkedQuestions: bookmarkedQuestions
    }));

    submitExamMutation.mutate(examData);
  };

  const handleTimeUp = () => {
    toast({
      title: "หมดเวลาการสอบ",
      description: "ระบบจะส่งข้อสอบโดยอัตโนมัติ",
      variant: "destructive",
    });
    setTimeout(() => {
      handleSubmitExam();
    }, 1500);
  };

  if (generateExamMutation.isPending || examQuestions.length === 0) {
    return (
      <div className="min-h-screen bg-primary-bg flex items-center justify-center">
        <Card className="w-full max-w-md mx-4">
          <CardContent className="pt-6 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-blue mx-auto mb-4"></div>
            <h2 className="text-lg font-semibold mb-2">กำลังเตรียมข้อสอบ...</h2>
            <p className="text-gray-600">กรุณารอสักครู่</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  const currentQuestion = examQuestions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / examQuestions.length) * 100;
  const answeredQuestions = Object.keys(answers).length;
  const isLastQuestion = currentQuestionIndex === examQuestions.length - 1;
  const allQuestionsAnswered = answeredQuestions === examQuestions.length;

  const getCategoryProgress = () => {
    const categoryStats: Record<string, { total: number; answered: number; color: string }> = {};
    
    examQuestions.forEach(question => {
      const categoryInfo = categories.find(cat => cat.id === question.category);
      const categoryKey = categoryInfo?.id || question.category;
      
      if (!categoryStats[categoryKey]) {
        categoryStats[categoryKey] = {
          total: 0,
          answered: 0,
          color: categoryInfo?.color || "bg-gray-500"
        };
      }
      
      categoryStats[categoryKey].total++;
      if (answers[question.id] !== undefined) {
        categoryStats[categoryKey].answered++;
      }
    });
    
    return categoryStats;
  };

  const filteredQuestions = selectedCategory === "all" 
    ? examQuestions 
    : examQuestions.filter(q => q.category === selectedCategory);

  const getQuestionsByCategory = (categoryId: string) => {
    return examQuestions.filter(q => q.category === categoryId);
  };

  return (
    <div className={`min-h-screen transition-colors duration-300 ${darkMode ? 'dark bg-gray-900' : 'bg-primary-bg'}`}>
      {/* Exam Header */}
      <div className={`border-b sticky top-0 z-10 backdrop-blur-sm transition-colors duration-300 ${
        darkMode 
          ? 'bg-gray-800/95 border-gray-700' 
          : 'bg-white/95 border-secondary-gray'
      }`}>
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between mb-4">
            <div className={`text-lg font-medium flex items-center gap-3 ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
              <BookOpen className="w-5 h-5 text-primary-blue" />
              ข้อที่ <span className="text-primary-blue font-bold text-xl">{currentQuestionIndex + 1}</span> จาก{" "}
              <span className="font-semibold">{examQuestions.length}</span>
            </div>
            <div className="flex items-center gap-4">
              {/* Dark Mode Toggle */}
              <div className="flex items-center gap-2">
                <Sun className={`w-4 h-4 ${darkMode ? 'text-gray-400' : 'text-yellow-500'}`} />
                <Switch
                  checked={darkMode}
                  onCheckedChange={setDarkMode}
                  className="data-[state=checked]:bg-gray-600"
                />
                <Moon className={`w-4 h-4 ${darkMode ? 'text-blue-400' : 'text-gray-400'}`} />
              </div>
              <ExamTimer
                duration={examConfig?.duration || EXAM_DURATION}
                onTimeUp={handleTimeUp}
                startTime={startTime}
              />
            </div>
          </div>

          {/* Overall Progress Bar */}
          <div className="mb-4">
            <div className={`flex items-center justify-between text-xs mb-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              <span>ความคืบหน้าโดยรวม</span>
              <span>{progress.toFixed(1)}%</span>
            </div>
            <Progress value={progress} className={`w-full h-3 ${darkMode ? 'bg-gray-700' : ''}`} />
          </div>
          
          {/* Enhanced Category Progress Bars */}
          <div className="space-y-3 mb-4">
            <h4 className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              ความคืบหน้าตามวิชา
            </h4>
            {Object.entries(getCategoryProgress()).map(([categoryId, stats]) => {
              const categoryInfo = categories.find(cat => cat.id === categoryId);
              const categoryProgress = (stats.answered / stats.total) * 100;
              
              return (
                <div key={categoryId} className={`rounded-lg p-3 transition-colors ${
                  darkMode ? 'bg-gray-800 border border-gray-700' : 'bg-gray-50 border border-gray-200'
                }`}>
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${darkMode ? categoryInfo?.darkColor : categoryInfo?.color || stats.color}`}></div>
                      <span className={`text-xs font-medium truncate ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                        {categoryInfo?.name || categoryId}
                      </span>
                    </div>
                    <div className={`text-xs font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                      {stats.answered}/{stats.total}
                    </div>
                  </div>
                  <div className={`w-full rounded-full h-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                    <div 
                      className={`h-2 rounded-full transition-all duration-500 ${darkMode ? categoryInfo?.darkColor : categoryInfo?.color || stats.color}`}
                      style={{ width: `${categoryProgress}%` }}
                    ></div>
                  </div>
                  <div className={`text-xs mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    {categoryProgress.toFixed(1)}% เสร็จสิ้น
                  </div>
                </div>
              );
            })}
          </div>
          
          <div className="text-xs text-gray-600">
            ความคืบหน้า: {progress.toFixed(1)}% • ตอบแล้ว: {answeredQuestions}/{examQuestions.length} ข้อ
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <main className="max-w-6xl mx-auto px-4 py-6">
        {/* Navigation Grid Modal */}
        {showNavigationGrid && (
          <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 backdrop-blur-sm">
            <div className={`rounded-2xl p-6 max-w-5xl w-full mx-4 max-h-[85vh] overflow-auto shadow-2xl border transition-colors ${
              darkMode 
                ? 'bg-gray-800 border-gray-700' 
                : 'bg-white border-gray-200'
            }`}>
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center gap-3">
                  <BookOpen className={`w-6 h-6 ${darkMode ? 'text-blue-400' : 'text-primary-blue'}`} />
                  <h3 className={`text-xl font-bold ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                    เลือกข้อสอบ
                  </h3>
                </div>
                <Button
                  variant="ghost"
                  onClick={() => setShowNavigationGrid(false)}
                  className={`text-2xl font-light ${darkMode ? 'text-gray-400 hover:text-gray-200 hover:bg-gray-700' : 'text-gray-500 hover:text-gray-700'}`}
                >
                  ✕
                </Button>
              </div>

              {/* Category Filter in Navigation Grid */}
              <div className="mb-6">
                <div className="flex items-center gap-3 mb-3">
                  <Filter className={`w-4 h-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`} />
                  <span className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    กรองตามวิชา:
                  </span>
                </div>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className={`w-80 ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-200' : ''}`}>
                    <SelectValue placeholder="เลือกวิชา" />
                  </SelectTrigger>
                  <SelectContent className={darkMode ? 'bg-gray-700 border-gray-600' : ''}>
                    <SelectItem value="all" className={darkMode ? 'text-gray-200 focus:bg-gray-600' : ''}>
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"></div>
                        ทุกวิชา
                      </div>
                    </SelectItem>
                    {categories.map((category) => (
                      <SelectItem 
                        key={category.id} 
                        value={category.id}
                        className={darkMode ? 'text-gray-200 focus:bg-gray-600' : ''}
                      >
                        <div className="flex items-center gap-2">
                          <div className={`w-3 h-3 ${darkMode ? category.darkColor : category.color} rounded-full`}></div>
                          {category.name}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-10 gap-3 mb-6">
                {(selectedCategory === "all" ? examQuestions : examQuestions.filter(q => q.category === selectedCategory)).map((question, filteredIndex) => {
                  const originalIndex = examQuestions.findIndex(q => q.id === question.id);
                  const isAnswered = answers[question.id] !== undefined;
                  const isBookmarked = bookmarkedQuestions.includes(question.id);
                  const isCurrent = originalIndex === currentQuestionIndex;
                  const categoryInfo = categories.find(cat => cat.id === question.category);

                  return (
                    <Button
                      key={question.id}
                      variant="outline"
                      size="sm"
                      onClick={() => jumpToQuestion(originalIndex)}
                      className={`
                        relative min-w-[45px] h-12 text-sm font-bold transition-all duration-300 rounded-xl
                        ${isCurrent
                          ? `${darkMode ? 'bg-blue-600 hover:bg-blue-700 border-blue-500' : 'bg-blue-600 hover:bg-blue-700 border-blue-600'} text-white shadow-lg transform scale-105`
                          : isAnswered
                            ? `${darkMode ? 'bg-green-600 hover:bg-green-700 border-green-500' : 'bg-green-500 hover:bg-green-600 border-green-500'} text-white`
                            : `${darkMode ? 'bg-gray-700 hover:bg-gray-600 border-gray-600 text-gray-200' : 'bg-white hover:bg-gray-50 border-gray-300 text-gray-700'}`
                        }
                        ${isBookmarked ? (darkMode ? "ring-2 ring-yellow-500 ring-offset-2 ring-offset-gray-800" : "ring-2 ring-yellow-400 ring-offset-2") : ""}
                      `}
                      title={`ข้อ ${originalIndex + 1} - ${categoryInfo?.name || question.category}${isBookmarked ? ' (บุ๊กมาร์ก)' : ''}${isAnswered ? ' (ตอบแล้ว)' : ''}`}
                    >
                      {originalIndex + 1}
                      {isBookmarked && (
                        <span className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full flex items-center justify-center text-xs shadow-md">
                          📌
                        </span>
                      )}
                      {categoryInfo && (
                        <div className={`absolute bottom-0 left-0 right-0 h-1 rounded-b-xl ${darkMode ? categoryInfo.darkColor : categoryInfo.color}`}></div>
                      )}
                    </Button>
                  );
                })}
              </div>

              <div className={`grid grid-cols-2 md:grid-cols-4 gap-4 text-sm p-4 rounded-xl ${
                darkMode ? 'bg-gray-700' : 'bg-gray-50'
              }`}>
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-blue-600 rounded-lg shadow-sm"></div>
                  <span className={darkMode ? 'text-gray-200' : 'text-gray-700'}>ข้อปัจจุบัน</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-green-500 rounded-lg shadow-sm"></div>
                  <span className={darkMode ? 'text-gray-200' : 'text-gray-700'}>ตอบแล้ว</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className={`w-5 h-5 rounded-lg shadow-sm border-2 ${
                    darkMode ? 'bg-gray-600 border-gray-500' : 'bg-white border-gray-300'
                  }`}></div>
                  <span className={darkMode ? 'text-gray-200' : 'text-gray-700'}>ยังไม่ตอบ</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-yellow-400 rounded-full shadow-sm"></div>
                  <span className={darkMode ? 'text-gray-200' : 'text-gray-700'}>บุ๊กมาร์ก</span>
                </div>
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Question Content */}
          <div className="lg:col-span-2">
            <Card className={`shadow-lg transition-colors ${
              darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'
            }`}>
              <CardContent className="p-6">
                {/* Question Header */}
                <div className="flex items-center justify-between mb-6 flex-wrap gap-3">
                  <div className="flex items-center space-x-3 flex-wrap">
                    <Badge 
                      variant="secondary" 
                      className={`px-4 py-2 text-sm font-semibold ${
                        darkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      ข้อ {currentQuestionIndex + 1} / {examQuestions.length}
                    </Badge>
                    <Badge
                      variant="outline"
                      className={`px-4 py-2 text-sm font-medium border-2 transition-colors ${
                        darkMode 
                          ? 'text-blue-400 border-blue-500 bg-blue-500/10' 
                          : 'text-primary-blue border-primary-blue bg-blue-50'
                      }`}
                    >
                      {categories.find(cat => cat.id === currentQuestion.category)?.name || currentQuestion.category}
                    </Badge>
                    <Badge
                      className={`px-4 py-2 text-sm font-medium border ${getDifficultyColor(currentQuestion.difficulty)}`}
                    >
                      {currentQuestion.difficulty}
                    </Badge>
                  </div>

                  <div className="flex items-center space-x-3">
                    <Button
                      variant={bookmarkedQuestions.includes(currentQuestion.id) ? "default" : "outline"}
                      size="sm"
                      onClick={() => toggleBookmark(currentQuestion.id)}
                      className={`flex items-center space-x-2 px-4 py-2 rounded-xl font-medium transition-all ${
                        bookmarkedQuestions.includes(currentQuestion.id)
                          ? 'bg-yellow-500 hover:bg-yellow-600 text-white shadow-md transform scale-105'
                          : darkMode
                            ? 'border-gray-600 text-gray-300 hover:bg-gray-700'
                            : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <span className="text-lg">{bookmarkedQuestions.includes(currentQuestion.id) ? "🔖" : "📑"}</span>
                      <span>บุ๊กมาร์ก</span>
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowNavigationGrid(true)}
                      className={`flex items-center space-x-2 px-4 py-2 rounded-xl font-medium transition-all ${
                        darkMode
                          ? 'border-gray-600 text-gray-300 hover:bg-gray-700'
                          : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <span className="text-lg">🗂️</span>
                      <span>เลือกข้อสอบ</span>
                    </Button>
                  </div>
                </div>

                {/* Question Text */}
                <div className={`p-6 rounded-xl mb-6 ${
                  darkMode ? 'bg-gray-700/50' : 'bg-gray-50'
                }`}>
                  <h2 className={`text-xl font-medium leading-relaxed ${
                    darkMode ? 'text-gray-200' : 'text-gray-800'
                  }`}>
                    {currentQuestion.questionText}
                  </h2>
                </div>

                {/* Answer Options */}
                <div className="space-y-4">
                  {currentQuestion.options.map((option, index) => {
                    const isSelected = answers[currentQuestion.id] === index;
                    const optionLabels = ['ก', 'ข', 'ค', 'ง'];

                    return (
                      <Button
                        key={index}
                        variant="outline"
                        className={`answer-option w-full p-5 text-left h-auto justify-start rounded-xl transition-all duration-300 transform hover:scale-[1.02] ${
                          isSelected 
                            ? `border-primary-blue shadow-lg ${
                                darkMode 
                                  ? 'bg-blue-500/20 border-blue-400' 
                                  : 'bg-primary-blue bg-opacity-10 border-primary-blue'
                              }` 
                            : `${
                                darkMode 
                                  ? 'border-gray-600 hover:border-gray-500 hover:bg-gray-700/50' 
                                  : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                              }`
                        }`}
                        onClick={() => handleAnswerSelect(index)}
                      >
                        <div className="flex items-center w-full">
                          <span className={`w-10 h-10 text-sm font-bold rounded-full flex items-center justify-center mr-4 transition-all duration-300 ${
                            isSelected 
                              ? "bg-primary-blue text-white shadow-md transform scale-110" 
                              : `${darkMode ? 'bg-gray-600 text-gray-200' : 'bg-secondary-gray text-gray-600'}`
                          }`}>
                            {optionLabels[index]}
                          </span>
                          <span className={`flex-1 text-base leading-relaxed transition-colors duration-300 ${
                            isSelected 
                              ? `${darkMode ? 'text-blue-300 font-medium' : 'text-primary-blue font-medium'}` 
                              : `${darkMode ? 'text-gray-200' : 'text-gray-700'}`
                          }`}>
                            {option}
                          </span>
                          {isSelected && (
                            <div className="text-primary-blue text-xl ml-2">✓</div>
                          )}
                        </div>
                      </Button>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Navigation Buttons */}
            <div className="flex justify-between items-center mt-6">
              <Button
                onClick={handlePreviousQuestion}
                disabled={currentQuestionIndex === 0}
                className="px-6 py-3"
                variant="outline"
              >
                ← ข้อก่อนหน้า
              </Button>

              <div className="text-center">
                {/* Auto-save Status */}
                <div className="text-xs mb-2">
                  {autoSaveStatus === "saved" && (
                    <span className="text-green-600">✓ บันทึกอัตโนมัติแล้ว</span>
                  )}
                  {autoSaveStatus === "saving" && (
                    <span className="text-blue-600">💾 กำลังบันทึก...</span>
                  )}
                  {autoSaveStatus === "error" && (
                    <span className="text-red-600">⚠️ บันทึกไม่สำเร็จ</span>
                  )}
                </div>
              </div>

              {!isLastQuestion ? (
                <Button
                  onClick={handleNextQuestion}
                  className="px-6 py-3 bg-primary-blue hover:bg-blue-500"
                >
                  ข้อถัดไป →
                </Button>
              ) : (
                <Button
                  onClick={() => setShowConfirmSubmit(true)}
                  className="px-6 py-3 bg-green-600 hover:bg-green-700"
                >
                  ส่งข้อสอบ
                </Button>
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            <Card className={`sticky top-24 shadow-lg transition-colors ${
              darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'
            }`}>
              <CardContent className="p-6">
                <h3 className="text-lg font-semibold mb-4">สรุปข้อสอบ</h3>
                <div className="space-y-3 mb-6">
                  <div className="flex justify-between items-center">
                    <span>ตอบแล้ว</span>
                    <span className="font-medium">{answeredQuestions} / {examQuestions.length}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>บุ๊กมาร์ก</span>
                    <span className="font-medium">{bookmarkedQuestions.length}</span>
                  </div>
                </div>
                
                <div className="mb-4">
                  <Button
                    onClick={() => setShowNavigationGrid(true)}
                    className="w-full bg-primary-blue hover:bg-blue-500"
                    size="sm"
                  >
                    🗂️ เลือกข้อสอบ
                  </Button>
                </div>

                {/* Quick Navigation */}
                <div>
                  <h4 className="text-sm font-medium mb-3">นำทางด่วน</h4>
                  <div className="grid grid-cols-5 gap-1 max-h-60 overflow-y-auto">
                    {examQuestions.map((question, index) => {
                      const isAnswered = answers[question.id] !== undefined;
                      const isBookmarked = bookmarkedQuestions.includes(question.id);
                      const isCurrent = index === currentQuestionIndex;

                      return (
                        <Button
                          key={question.id}
                          variant="outline"
                          size="sm"
                          onClick={() => setCurrentQuestionIndex(index)}
                          className={`
                            h-8 text-xs p-0 min-w-0
                            ${isCurrent
                              ? "bg-blue-600 text-white border-blue-600"
                              : isAnswered
                                ? "bg-green-500 text-white border-green-500"
                                : "bg-white text-gray-700 border-gray-300"
                            }
                            ${isBookmarked ? "ring-1 ring-yellow-400" : ""}
                          `}
                        >
                          {index + 1}
                        </Button>
                      );
                    })}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      {/* Submit Confirmation Modal */}
      {showConfirmSubmit && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 backdrop-blur-sm">
          <Card className={`w-full max-w-lg mx-4 shadow-2xl border transition-colors ${
            darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
          }`}>
            <CardContent className="pt-8 pb-6 text-center">
              <div className="mb-6">
                <div className="w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-3xl">📝</span>
                </div>
                <h2 className={`text-2xl font-bold mb-3 ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                  ยืนยันการส่งข้อสอบ
                </h2>
                <div className={`text-base leading-relaxed ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  <p className="mb-2">
                    คุณได้ตอบคำถาม <span className="font-semibold text-green-600">{answeredQuestions}</span> จาก{" "}
                    <span className="font-semibold">{examQuestions.length}</span> ข้อแล้ว
                  </p>
                  <p>ต้องการส่งข้อสอบหรือไม่?</p>
                </div>
              </div>
              <div className="flex justify-center space-x-4">
                <Button 
                  variant="outline" 
                  onClick={() => setShowConfirmSubmit(false)}
                  className={`px-6 py-3 rounded-xl font-medium ${
                    darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''
                  }`}
                >
                  ยกเลิก
                </Button>
                <Button 
                  onClick={handleSubmitExam} 
                  disabled={submitExamMutation.isPending} 
                  className="px-6 py-3 bg-green-600 hover:bg-green-700 rounded-xl font-medium text-white shadow-lg disabled:opacity-50"
                >
                  {submitExamMutation.isPending ? (
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      กำลังส่ง...
                    </div>
                  ) : (
                    "ส่งข้อสอบ"
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}